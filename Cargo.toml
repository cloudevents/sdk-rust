[package]
name = "cloudevents-sdk"
version = "0.7.0"
authors = ["Francesco Guardiani <francescoguard@gmail.com>"]
license-file = "LICENSE"
edition = "2018"
description = "CloudEvents official Rust SDK"
documentation = "https://docs.rs/cloudevents-sdk"
readme = "README.md"
repository = "https://github.com/cloudevents/sdk-rust"
exclude = [
    ".github/*"
]
categories = ["web-programming", "encoding", "data-structures"]

# Enable all features when building on docs.rs to show feature gated bindings
[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[lib]
name = "cloudevents"

[features]
http-binding = ["async-trait", "bytes", "futures", "http"]
actix = ["actix-web", "actix-http", "async-trait", "bytes", "futures", "http"]
reqwest = ["reqwest-lib", "async-trait", "bytes", "http", "uuid/js"]
rdkafka = ["rdkafka-lib", "bytes", "futures"]
warp = ["warp-lib", "bytes", "http", "hyper"]
axum = ["bytes", "http-1-1", "hyper-1-3", "axum-lib-0-7", "http-body-1-0", "http-body-util", "async-trait"]
poem = ["bytes", "http", "poem-lib", "hyper", "async-trait"]
nats = ["nats-lib"]

[dependencies]
serde = { version = "^1.0", features = ["derive"] }
serde_json = "^1.0"
chrono = { version = "^0.4", features = ["serde"] }
delegate-attr = "^0.2"
base64 = "^0.12"
url = { version = "^2.1", features = ["serde"] }
snafu = "^0.6"
bitflags = "^1.2"
uuid = { version = "1", features = ["v4"] }

# runtime optional deps
actix-web = { version = "4", optional = true }
actix-http = { version = "3", optional = true }
reqwest-lib = { version = "^0.11", default-features = false, features = ["rustls-tls"], optional = true, package = "reqwest" }
rdkafka-lib = { version = "^0.36", features = ["cmake-build"], optional = true, package = "rdkafka" }
warp-lib = { version = "^0.3", optional = true, package = "warp" }
async-trait = { version = "^0.1.33", optional = true }
bytes = { version = "^1.0", optional = true }
# bytes-1-6 = { version = "^1.6", optional = true, package="bytes" }
futures = { version = "^0.3", optional = true }
http = { version = "0.2", optional = true }
http-1-1 = { version = "1.1", optional = true, package = "http"}
axum-lib = { version = "^0.6", optional = true, package="axum"}
axum-lib-0-7 = { version = "^0.7", optional = true, package="axum"}
http-body = { version = "^0.4", optional = true }
http-body-1-0 = { version = "^1.0", optional = true, package="http-body" }
http-body-util = {version = "^0.1", optional = true}
poem-lib = { version = "=1.2.34", optional = true, package = "poem" }
nats-lib = { version = "0.21.0", optional = true, package = "nats" }

[target."cfg(not(target_arch = \"wasm32\"))".dependencies]
hostname = "^0.3"

[target.'cfg(all(target_arch = "wasm32", target_os = "unknown"))'.dependencies]
web-sys = { version = "^0.3", features = ["Window", "Location"] }

[target.'cfg(not(target_os = "wasi"))'.dependencies]
hyper = { version = "^0.14", optional = true }
hyper-1-3 = { version = "^1.3", optional = true, package="hyper" }

[target.'cfg(all(target_arch = "wasm32", target_os = "wasi"))'.dependencies]
hyper_wasi = { version = "0.15", features = ["full"], optional = true }

[dev-dependencies]
rstest = "0.6"
claims = "0.7.1"
version-sync = "0.9.2"
serde_yaml = "0.8"
rmp-serde = "1"

# runtime dev-deps

url = { version = "^2.1", features = ["serde"] }
serde_json = { version = "^1.0" }
chrono = { version = "^0.4", features = ["serde"] }
mockito = "0.25.1"
mime = "0.3"


[target.'cfg(not(target_os = "wasi"))'.dev-dependencies]
actix-rt = { version = "^2" }
tokio = { version = "^1.0", features = ["full"] }
tower = { version = "0.4", features = ["util"] }

[target.'cfg(all(target_arch = "wasm32", target_os = "wasi"))'.dev-dependencies]
tokio_wasi = { version = "1", features = [
    "io-util",
    "fs",
    "net",
    "time",
    "rt",
    "macros",
] }
